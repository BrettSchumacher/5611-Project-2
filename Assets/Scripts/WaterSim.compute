// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitialUpdate
#pragma kernel SetAdjLists
#pragma kernel SetCorrections
#pragma kernel SetScaleFactors
#pragma kernel RunSolver
#pragma kernel FinalUpdate

struct AdjList
{
    int list[20];
    float smoothKer[20];
    float3 kerGrad[20];
    int num;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> pos;
RWStructuredBuffer<float3> newPos;
RWStructuredBuffer<float3> vel;
RWStructuredBuffer<float> scaleFactors;
RWStructuredBuffer<AdjList> adjLists;
int numPoints;
float3 minBounds;
float3 maxBounds;
float rest_density;
float influence_radius;
float grav;
float eps;
float dq;
float k_corr;

float dt;
float solver_dt;

static const float PI = 3.14159265f;

float Poly6Smooth(float r)
{
    if (r >= influence_radius)
    {
        return 0.f;
    }
    float h2 = influence_radius * influence_radius;
    float dist = h2 - r * r;

    return 315.f / (64.f * PI * h2 * h2 * h2 * h2 * influence_radius) * dist * dist * dist;
}

float SpikeySmooth(float r)
{
    if (r >= influence_radius)
    {
        return 0.f;
    }
    float dist = influence_radius - r;
    float h2 = influence_radius * influence_radius;

    return 15.f / (PI * h2 * h2 * h2) * dist * dist * dist;
}

float DensityAtInd(int ind)
{
    float density = 0.f;
    int ind2;

    for (int i = 0; i < adjLists[ind].num; i++)
    {
        ind2 = adjLists[ind].list[i];
        density += adjLists[ind].smoothKer[i];
    }

    return density;
}

float SpikeyDensityAtPos(int ind, float3 pos)
{
    float density = 0.f;
    int ind2;

    for (int i = 0; i < adjLists[ind].num; i++)
    {
        ind2 = adjLists[ind].list[i];
        density += SpikeySmooth(length(newPos[ind2] - newPos[ind] + pos));
    }

    return density;
}

float Correction(int ind)
{
    return DensityAtInd(ind) / rest_density - 1.f;
}

//gradient of smoothing kernel between i and j
float3 KernelGrad(int i, int j)
{
    /*
    float eps = influence_radius / 100.f;
    float dx = SpikeyDensityAtPos(i, float3(eps, 0.f, 0.f)) - SpikeyDensityAtPos(i, float3(-eps, 0.f, 0.f));
    float dy = SpikeyDensityAtPos(i, float3(0.f, eps, 0.f)) - SpikeyDensityAtPos(i, float3(0.f, -eps, 0.f));
    float dz = SpikeyDensityAtPos(i, float3(0.f, 0.f, eps)) - SpikeyDensityAtPos(i, float3(0.f, 0.f, -eps));

    return float3(dx, dy, dz) / (2.f * eps);
    */
    float3 r = newPos[j] - newPos[i];
    float h2 = influence_radius * influence_radius;
    return 45.f / (PI * h2 * h2 * h2) * (influence_radius - length(r)) * (influence_radius - length(r)) * normalize(r);
}

float SetScalingFac(int ind)
{
    float gradientSum = 0.f;
    float3 jGrad = 0.f; //current gradient for ptc j
    float3 iGrad = 0.f; //sum of grads that make up gradient for ptc i
    int ind2;
    
    
    for (int i = 0; i < adjLists[ind].num; i++)
    {
        ind2 = adjLists[ind].list[i];
        jGrad = adjLists[ind].kerGrad[i];
        iGrad += jGrad;
        gradientSum += length(jGrad) * length(jGrad);
    }
    
    gradientSum += length(iGrad) * length(iGrad);
    gradientSum /= rest_density;
    
    return -Correction(ind) / (gradientSum + eps);
}

float3 GetForce(int ind)
{
    return float3(0.f, -grav, 0.f);
}

float3 CorrectBoundaries(float3 testPos, int ind)
{
    float3 corrected = testPos;
    
    if (corrected.x < minBounds.x)
    {
        corrected.x = minBounds.x + 0.001f;
        vel[ind].x = 0.f;
    }
    else if (corrected.x > maxBounds.x)
    {
        corrected.x = maxBounds.x - 0.001f;
        vel[ind].x = 0.f;
    }
    
    if (corrected.y < minBounds.y)
    {
        corrected.y = minBounds.y + 0.001f;
        vel[ind].y = 0.f;
    }
    else if (corrected.y > maxBounds.y)
    {
        corrected.y = maxBounds.y - 0.001f;
        vel[ind].y = 0.f;
    }
    
    if (corrected.z < minBounds.z)
    {
        corrected.z = minBounds.z + 0.001f;
        vel[ind].z = 0.f;
    }
    else if (corrected.z > maxBounds.z)
    {
        corrected.z = maxBounds.z - 0.001f;
        vel[ind].z = 0.f;
    }
    
    return corrected - testPos;
}

float SCorr(int ind1, int j, float pressure)
{
    float s = adjLists[ind1].smoothKer[j] / pressure;
    return -k_corr * s * s * s * s;
}

float3 ViscCorr(int ind)
{
    int ind2;
    float3 corr = 0.f;
    
    for (int i = 0; i < adjLists[ind].num; i++)
    {
        ind2 = adjLists[ind].list[i];
        corr += (vel[ind2] - vel[ind]) * adjLists[ind].smoothKer[i];
    }
    
    return corr * 0.006f;
}

[numthreads(64, 1, 1)]
void InitialUpdate(uint3 id : SV_DispatchThreadID)
{
    int ind = id.x;

    vel[ind] = vel[ind] + dt * GetForce(ind);
    newPos[ind] = pos[ind] + vel[ind] * dt;
    newPos[ind] += CorrectBoundaries(newPos[ind], ind);
}

[numthreads(64, 1, 1)]
void SetAdjLists(uint id : SV_DispatchThreadID)
{
    int ind = id.x;
    int num = 0;
    
    for (int i = 0; i < numPoints; i++)
    {
        if (i == ind)
            continue;
        
        if (length(newPos[i] - newPos[ind]) < influence_radius)
        {
            adjLists[ind].list[num] = i;
            num++;
        }
        
        if (adjLists[ind].num >= 20) //this is bad
        {
            break;
        }
    }
    
    adjLists[ind].num = num;

}

[numthreads(64, 1, 1)]
void SetCorrections(uint3 id : SV_DispatchThreadID)
{
    int ind = id.x;
    int ind2;

    for (int i = 0; i < adjLists[ind].num; i++)
    {
        ind2 = adjLists[ind].list[i];
        adjLists[ind].smoothKer[i] = Poly6Smooth(length(newPos[ind2] - newPos[ind]));
        adjLists[ind].kerGrad[i] = KernelGrad(ind, ind2);
    }
}

[numthreads(64, 1, 1)]
void SetScaleFactors(uint3 id : SV_DispatchThreadID)
{
    scaleFactors[id.x] = SetScalingFac(id.x);
}

[numthreads(64, 1, 1)]
void RunSolver(uint3 id : SV_DispatchThreadID)
{
    int ind = id.x;
    float art_pressure = Poly6Smooth(influence_radius * dq);
    
    float3 dp = 0.f;
    int ind2;
    
    for (int i = 0; i < adjLists[ind].num; i++)
    {
        ind2 = adjLists[ind].list[i];
        dp += (scaleFactors[ind] + scaleFactors[ind2] + SCorr(ind, i, art_pressure)) * adjLists[ind].kerGrad[i];
    }

    dp /= rest_density;
    
    //account for boundaries
    newPos[ind] += dp;
    newPos[ind] += CorrectBoundaries(newPos[ind], ind);
}

[numthreads(64, 1, 1)]
void FinalUpdate(uint3 id : SV_DispatchThreadID)
{
    int ind = id.x;

    vel[ind] = (newPos[ind] - pos[ind]) / dt;
        
    //apply viscosity
    vel[ind] += ViscCorr(ind);
    
    pos[ind] = newPos[ind];

}