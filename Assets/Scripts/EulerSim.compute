// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateMid
#pragma kernel UpdateMain
#pragma kernel SetVals
#pragma kernel GenerateMesh
#pragma kernel InitializeArrays

RWStructuredBuffer<float> h;
RWStructuredBuffer<float> hu;
RWStructuredBuffer<float> hv;
float grav;
float drag;
float density;
float visc;
float max_height;

float dx;
float dt;
uint rows;
uint cols;
uint numPtcls;

uint row(uint ind)
{
    return ind / cols;
}

uint col(uint ind)
{
    return ind % cols;
}

float h_mid(uint ind)
{
    return h[ind + numPtcls];
}

float hu_mid(uint ind)
{
    return hu[ind + numPtcls];
}

float hv_mid(uint ind)
{
    return hv[ind + numPtcls];
}


//equations for t_ij from https://web.mit.edu/2.25/www/pdf/viscous_flow_eqn.pdf
//equations for shear stress from https://creativecoding.soe.ucsc.edu/courses/cs488/finalprojects/shallow/shallow.pdf
//float shear_stress_u(uint ind, int xoff, int yoff)
//{
//    float du_dx = hu[ind + xoff] / h[ind + xoff] - hu[ind] / h[ind];
//    float du_dy = hu[ind + yoff] / h[ind + yoff] - hu[ind] / h[ind];
//    float dv_dx = hv[ind + xoff] / h[ind + xoff] - hv[ind] / h[ind];
//    float w1 = (h[ind + numPtcls] - h[ind]) / (2.f * dt); //z vel
//    float w2 = (h[ind + numPtcls + xoff] - h[ind + xoff]) / (2.f * dt);
//    float dw_dx = w1 - w2;
//    
//    float txx = -density + 2 * visc * du_dx;
//    float txy = visc * (du_dy + dv_dx);
//    float txz = visc * dw_dx;
//    W
//    float dh_dx = h[ind + xoff] - h[ind];
//    float dh_dy = h[ind + yoff] - h[ind];
//    
//    return (-txx * dh_dx - txy * dh_dy + txz) / dx;
//}
//
//float shear_stress_v(uint ind, int xoff, int yoff)
//{
//    float du_dy = hu[ind + yoff] / h[ind + yoff] - hu[ind] / h[ind];
//    float dv_dx = hv[ind + xoff] / h[ind + xoff] - hv[ind] / h[ind];
//    float dv_dy = hv[ind + yoff] / h[ind + yoff] - hv[ind] / h[ind];
//    float w1 = (h[ind + numPtcls] - h[ind]) / (2.f * dt); //z vel
//    float w2 = (h[ind + numPtcls + yoff] - h[ind + yoff]) / (2.f * dt);
//    float dw_dy = w1 - w2;
//    
//    float tyy = -density + 2 * visc * dv_dy;
//    float txy = visc * (du_dy + dv_dx);
//    float tyz = visc * dw_dy;
//    
//    float dh_dx = h[ind + xoff] - h[ind];
//    float dh_dy = h[ind + yoff] - h[ind];
//    
//    return (-tyy * dh_dy - txy * dh_dx + tyz) / dx;
//}

float xAvgNext(RWStructuredBuffer<float> vals, uint ind)
{
    return vals[ind + 1] + vals[ind + 1 + cols];
}

float xAvgPrev(RWStructuredBuffer<float> vals, uint ind)
{
    return vals[ind] + vals[ind + cols];
}

float yAvgNext(RWStructuredBuffer<float> vals, uint ind) 
{
    return vals[ind + cols] + vals[ind + cols + 1];
}

float yAvgPrev(RWStructuredBuffer<float> vals, uint ind)
{
    return vals[ind] + vals[ind + 1];
}

float avg(RWStructuredBuffer<float> vals, uint ind)
{
    return 0.25f * (vals[ind] + vals[ind + 1] + vals[ind + cols] + vals[ind + cols + 1]);
}

void UpdateHMid(uint ind)
{
    float dhu_dx = xAvgNext(hu, ind) - xAvgPrev(hu, ind);
    float dhv_dy = yAvgNext(hv, ind) - yAvgPrev(hv, ind);
    
    h[ind + numPtcls] = avg(h, ind) - dt * (dhu_dx - dhv_dy) / (2.f * dx) / drag;
}

void UpdateHUMid(uint ind)
{
    float dhu2_dx = xAvgNext(hu, ind) * xAvgNext(hu, ind) / xAvgNext(h, ind) - xAvgPrev(hu, ind) * xAvgPrev(hu, ind) / xAvgPrev(h, ind);
    float dh2_dx = xAvgNext(h, ind) * xAvgNext(h, ind) - xAvgPrev(h, ind) * xAvgPrev(h, ind);
    float dhuv_dy = yAvgNext(hu, ind) * yAvgNext(hv, ind) / yAvgNext(h, ind) - yAvgPrev(hu, ind) * yAvgPrev(hv, ind) / yAvgPrev(h, ind);
    
    hu[ind + numPtcls] = (avg(hu, ind) - dt * (dhu2_dx + grav * dh2_dx - dhuv_dy) / (2.f * dx)) / visc;
}

void UpdateHVMid(uint ind)
{
    float dhv2_dy = yAvgNext(hv, ind) * yAvgNext(hv, ind) / yAvgNext(h, ind) - yAvgPrev(hv, ind) * yAvgPrev(hv, ind) / yAvgPrev(h, ind);
    float dh2_dy = yAvgNext(h, ind) * yAvgNext(h, ind) - yAvgPrev(h, ind) * yAvgPrev(h, ind);
    float dhuv_dx = xAvgNext(hu, ind) * xAvgNext(hv, ind) / xAvgNext(h, ind) - xAvgPrev(hu, ind) * xAvgPrev(hv, ind) / xAvgPrev(h, ind);
    
    hv[ind + numPtcls] = (avg(hv, ind) - dt * (-dhv2_dy - grav * dh2_dy + dhuv_dx) / (2.f * dx)) / visc;
}

//using dh/dt = -dhu/dx - dhv/dy
void UpdateH(uint ind)
{
    uint newInd = ind - cols - 1 + numPtcls;
    
    float dhu_dx = xAvgNext(hu, newInd) - xAvgPrev(hu, newInd);
    float dhv_dy = yAvgNext(hv, newInd) - yAvgPrev(hv, newInd);
    
    h[ind + 2 * numPtcls] = h[ind] - dt * (dhu_dx - dhv_dy) / (2.f * dx) / drag;
}

//using dhu/dt = -dhu^2/dx - 1/2g*dh^2/dx - dhuv/dy
void UpdateHU(uint ind)
{    
    uint newInd = ind - cols - 1 + numPtcls;

    float dhu2_dx = xAvgNext(hu, newInd) * xAvgNext(hu, newInd) / xAvgNext(h, newInd) - xAvgPrev(hu, newInd) * xAvgPrev(hu, newInd) / xAvgPrev(h, newInd);
    float dh2_dx = xAvgNext(h, newInd) * xAvgNext(h, newInd) - xAvgPrev(h, newInd) * xAvgPrev(h, newInd);
    float dhuv_dy = yAvgNext(hu, newInd) * yAvgNext(hv, newInd) / yAvgNext(h, newInd) - yAvgPrev(hu, newInd) * yAvgPrev(hv, newInd) / yAvgPrev(h, newInd);
    
    hu[ind + 2 * numPtcls] = (hu[ind] - dt * (dhu2_dx + grav * dh2_dx - dhuv_dy) / (2.f * dx)) / visc;

}

//using dhv/dt = -dhv^2/dy - 1/2g*dh^2/dy - dhuv/dx
void UpdateHV(uint ind)
{        
    uint newInd = ind - cols - 1 + numPtcls;

    float dhv2_dy = yAvgNext(hv, newInd) * yAvgNext(hv, newInd) / yAvgNext(h, newInd) - yAvgPrev(hv, newInd) * yAvgPrev(hv, newInd) / yAvgPrev(h, newInd);
    float dh2_dy = yAvgNext(h, newInd) * yAvgNext(h, newInd) - yAvgPrev(h, newInd) * yAvgPrev(h, newInd);
    float dhuv_dx = xAvgNext(hu, newInd) * xAvgNext(hv, newInd) / xAvgNext(h, newInd) - xAvgPrev(hu, newInd) * xAvgPrev(hv, newInd) / xAvgPrev(h, newInd);
    
    hv[ind + 2 * numPtcls] = (hv[ind] - dt * (-dhv2_dy - grav * dh2_dy + dhuv_dx) / (2.f * dx)) / visc;
}

void EnforceLimit(uint ind)
{
    if (h[ind] < 0)
    {
        h[ind] = 0.01f;
    }
    if (h[ind] > max_height)
    {
        h[ind] = max_height - 0.01f;
    }
}

[numthreads(64, 1, 1)]
void UpdateMid (uint3 id : SV_DispatchThreadID)
{
    uint ind = id.x;
    
    //skip if on the edge
    if (row(ind) >= rows - 1 || 
        col(ind) >= cols - 1 ||
        ind >= numPtcls || ind < 0)   
    {
        return;
    }
    
    UpdateHUMid(ind);
    UpdateHVMid(ind);
    UpdateHMid(ind);
    EnforceLimit(ind + numPtcls);

}

//[numthreads(64, 1, 1)]
//void UpdateHMains(uint3 id : SV_DispatchThreadID)
//{
//    uint ind = id.x;
//    
//    if (row(ind) <= 0 || row(ind) >= rows - 1 ||
//        col(ind) <= 0 || col(ind) >= cols - 1 ||
//        ind >= numPtcls)
//    {
//        return;
//    }
//    
//    UpdateH(ind);
//    EnforceLimit(ind + 2 * numPtcls);
//}

[numthreads(64, 1, 1)]
void UpdateMain(uint3 id : SV_DispatchThreadID)
{
    uint ind = id.x;
    
    if (row(ind) <= 0 || row(ind) >= rows - 1 ||
        col(ind) <= 0 || col(ind) >= cols - 1 ||
        ind >= numPtcls)
    {
        return;
    }
    
    UpdateHU(ind);
    UpdateHV(ind);
    UpdateH(ind);
    EnforceLimit(ind + 2 * numPtcls);
}

[numthreads(64, 1, 1)]
void SetVals(uint3 id : SV_DispatchThreadID)
{
    uint ind = id.x;
    
    if (ind >= numPtcls || ind < 0)
    {
        return;
    }
    
    //check corners
    if (ind == 0)
    {
        h[ind] = h[cols + 1 + 2 * numPtcls];
        hu[ind] = -hu[cols + 1 + 2 * numPtcls];
        hv[ind] = -hv[cols + 1 + 2 * numPtcls];
    }
    else if (row(ind) == 0 && col(ind) == cols - 1)
    {
        h[ind] = h[ind + cols - 1 + 2 * numPtcls];
        hu[ind] = -hu[ind + cols - 1 + 2 * numPtcls];
        hv[ind] = -hv[ind + cols - 1 + 2 * numPtcls];
    }
    else if (row(ind) == rows - 1 && col(ind) == 0)
    {
        h[ind] = h[ind - cols + 1 + 2 * numPtcls];
        hu[ind] = -hu[ind - cols + 1 + 2 * numPtcls];
        hv[ind] = -hv[ind - cols + 1 + 2 * numPtcls];
    }
    else if (row(ind) == rows - 1 && col(ind) == cols - 1)
    {
        h[ind] = h[ind - cols - 1 + 2 * numPtcls];
        hu[ind] = -hu[ind - cols - 1 + 2 * numPtcls];
        hv[ind] = -hv[ind - cols - 1 + 2 * numPtcls];
    }
    //reflect up if on bottom edge
    else if (row(ind) == rows - 1)
    {
        h[ind] = h[ind - cols + 2 * numPtcls];
        hu[ind] = hu[ind - cols + 2 * numPtcls];
        hv[ind] = -hv[ind - cols + 2 * numPtcls];
    }
    //reflect down if on top edge
    else if (row(ind) == 0)
    {
        h[ind] = h[ind + cols + 2 * numPtcls];
        hu[ind] = hu[ind + cols + 2 * numPtcls];
        hv[ind] = -hv[ind + cols + 2 * numPtcls];
    }
    //reflect right cell if on the left edge
    else if (col(ind) == 0)
    {
        h[ind] = h[ind + 1 + 2 * numPtcls];
        hu[ind] = -hu[ind + 1 + 2 * numPtcls];
        hv[ind] = hv[ind + 1 + 2 * numPtcls];
    }
    //reflect left if on right edge
    else if (col(ind) == cols - 1)
    {
        h[ind] = h[ind - 1 + 2 * numPtcls];
        hu[ind] = -hu[ind - 1 + 2 * numPtcls];
        hv[ind] = hv[ind - 1 + 2 * numPtcls];
    }
    //set normally if not an edge case
    else
    {
        h[ind] = h[ind + 2 * numPtcls];
        hu[ind] = hu[ind + 2 * numPtcls];
        hv[ind] = hv[ind + 2 * numPtcls];
    }
    
    EnforceLimit(ind);

}

RWStructuredBuffer<float3> verts;
RWStructuredBuffer<float3> norms;
RWStructuredBuffer<int> tris;
float3 bottomLeft;
float spacing;

float3 CellPos(uint ind)
{
    return float3(bottomLeft.x + col(ind) * spacing, bottomLeft.y + h[ind], bottomLeft.z + row(ind) * spacing);
}

float3 GroundPos(uint ind)
{
    return float3(bottomLeft.x + col(ind) * spacing, bottomLeft.y, bottomLeft.z + row(ind) * spacing);
}

[numthreads(64, 1, 1)]
void GenerateMesh(uint3 id : SV_DispatchThreadID)
{
    uint ind = id.x;
    float3 v1, v2, v3, norm;
    
    if (ind < 0)
    {
        return;
    }
    
    if (ind < (rows - 1) * (cols - 1))
    {
        //generate upper left triangle
        ind = ind + (ind / (cols - 1)) + cols + 1;
        v1 = CellPos(ind); v2 = CellPos(ind - 1); v3 = CellPos(ind - cols);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v3; verts[3 * id.x + 2] = v2;

        norm = normalize(cross(v3 - v1, v2 - v1));
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= (rows - 1) * (cols - 1);
    
    if (ind < (rows - 1) * (cols - 1))
    {
        //generate lower left triangle
        ind = ind + (ind / (cols - 1));
        v1 = CellPos(ind); v2 = CellPos(ind + 1); v3 = CellPos(ind + cols);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v3; verts[3 * id.x + 2] = v2;

        norm = normalize(cross(v3 - v1, v2 - v1));
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= (rows - 1) * (cols - 1);
    
    if (ind < rows - 1)
    {
        //generate front side pt 1
        v1 = CellPos(ind); v2 = CellPos(ind + 1); v3 = GroundPos(ind);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v2; verts[3 * id.x + 2] = v3;

        norm = float3(0, 0, -1);
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= rows - 1;

    if (ind < rows - 1)
    {
        //generate front side pt 2
        v1 = GroundPos(ind); v2 = CellPos(ind + 1); v3 = GroundPos(ind + 1);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v2; verts[3 * id.x + 2] = v3;

        norm = float3(0, 0, -1);
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= rows - 1;
    
    if (ind < cols - 1)
    {
        //generate right side pt 1
        ind = (ind + 1) * cols - 1;
        v1 = CellPos(ind); v2 = CellPos(ind + cols); v3 = GroundPos(ind);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v2; verts[3 * id.x + 2] = v3;

        norm = float3(1, 0, 0);
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= cols - 1;
    
    if (ind < cols - 1)
    {
        //generate right side pt 2
        ind = (ind + 1) * cols - 1;
        v1 = GroundPos(ind); v2 = CellPos(ind + cols); v3 = GroundPos(ind + cols);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v2; verts[3 * id.x + 2] = v3;

        norm = float3(1, 0, 0);
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= cols - 1;
    
    if (ind < rows - 1)
    {
        //generate back side pt 1
        ind = (rows - 1) * cols + ind;
        v1 = CellPos(ind); v2 = CellPos(ind + 1); v3 = GroundPos(ind);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v3; verts[3 * id.x + 2] = v2;

        norm = float3(0, 0, 1);
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= rows - 1;

    if (ind < rows - 1)
    {
        //generate back side pt 2
        ind = (rows - 1) * cols + ind;
        v1 = GroundPos(ind); v2 = CellPos(ind + 1); v3 = GroundPos(ind + 1);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v3; verts[3 * id.x + 2] = v2;

        norm = float3(0, 0, 1);
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= rows - 1;
    
    if (ind < cols - 1)
    {
        //generate left side pt 1
        ind = ind * cols;
        v1 = CellPos(ind); v2 = CellPos(ind + cols); v3 = GroundPos(ind);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v3; verts[3 * id.x + 2] = v2;

        norm = float3(-1, 0, 0);
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
    
    ind -= cols - 1;
    
    if (ind < cols - 1)
    {
        //generate left side pt 2
        ind = ind * cols;
        v1 = GroundPos(ind); v2 = CellPos(ind + cols); v3 = GroundPos(ind + cols);
        verts[3 * id.x] = v1; verts[3 * id.x + 1] = v3; verts[3 * id.x + 2] = v2;

        norm = float3(-1, 0, 0);
        norms[3 * id.x] = norm; norms[3 * id.x + 1] = norm; norms[3 * id.x + 2] = norm;

        tris[3 * id.x] = 3 * id.x; tris[3 * id.x + 1] = 3 * id.x + 1; tris[3 * id.x + 2] = 3 * id.x + 2;
        return;
    }
}

float avg_height;
float slope;

[numthreads(64, 1, 1)]
void InitializeArrays(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= numPtcls)
    {
        return;
    }
    
    uint ind = id.x;
    
    float x = (float) row(ind) - (float) rows / 2.f;
    x /= 10.f;
    float y = (float) col(ind) - (float) cols / 2.f;
    y /= 10.f;

    h[ind] += slope * exp(- x * x - y * y);
    EnforceLimit(ind);
    
    return;
}