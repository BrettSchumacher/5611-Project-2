// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> oldPos;
RWStructuredBuffer<float3> pos;
RWStructuredBuffer<float3> oldVel;
RWStructuredBuffer<float3> vel;
RWStructuredBuffer<int> neighbors;
float l0;
float k_spring;
float k_sdrag;
float k_adrag;
float grav;
float3 wind;
float dt;
float3 obstPos;
float3 obstVel;
float obstRadius;
float absorbtion;
float nodeRadius;
float tearThresh;
int cols;

static const float SQRT2 = 1.414213562f;

bool right(int neighborVal)
{
    return (neighborVal & 1) != 0;
}

bool down_right(int neighborVal)
{
    return (neighborVal & (1 << 1)) != 0;
}

bool down(int neighborVal)
{
    return (neighborVal & (1 << 2)) != 0;
}

bool down_left(int neighborVal)
{
    return (neighborVal & (1 << 3)) != 0;
}

bool left(int neighborVal)
{
    return (neighborVal & (1 << 4)) != 0;
}

bool up_left(int neighborVal)
{
    return (neighborVal & (1 << 5)) != 0;
}

bool up(int neighborVal)
{
    return (neighborVal & (1 << 6)) != 0;
}

bool up_right(int neighborVal)
{
    return (neighborVal & (1 << 7)) != 0;
}

bool anchored(int neighborVal)
{
    return (neighborVal & (1 << 8)) != 0;
}

float3 GetContr(int ind1, int ind2, float3 newPos, float3 newVel, float restl, inout float stretch)
{
    float3 l = newPos - oldPos[ind2];
    float3 acc = -k_spring * (l - restl * normalize(l));
    if (length(l) > 0.01f)
    {
        acc -= k_sdrag * dot(newVel - oldVel[ind2], l) * normalize(l);
    }

    stretch = (length(l) - restl) / restl;

    return acc;
}

float3 GetSpringAcc(int ind, float3 newPos, float3 newVel)
{
    float3 acc = float3(0.0f, 0.0f, 0.0f);
    int neighborVal = neighbors[ind];
    float stretch;

    if (right(neighborVal))
    {
        acc += GetContr(ind, ind + 1, newPos, newVel, l0, stretch);
        if (stretch > tearThresh)
        {
            neighbors[ind] &= ~1;
            neighbors[ind + 1] &= ~(1 << 4);
        }
    }

    if (down_right(neighborVal))
    {
        acc += GetContr(ind, ind + cols + 1, newPos, newVel, l0 * SQRT2, stretch);
        if (stretch > tearThresh)
        {
            neighbors[ind] &= ~(1 << 1);
            neighbors[ind + cols + 1] &= ~(1 << 5);
        }
    }

    if (down(neighborVal))
    {
        acc += GetContr(ind, ind + cols, newPos, newVel, l0, stretch);
        if (stretch > tearThresh)
        {
            neighbors[ind] &= ~(1 << 2);
            neighbors[ind + cols] &= ~(1 << 6);
        }
    }

    if (down_left(neighborVal))
    {
        acc += GetContr(ind, ind + cols - 1, newPos, newVel, l0 * SQRT2, stretch);
        if (stretch > tearThresh)
        {
            neighbors[ind] &= ~(1 << 3);
            neighbors[ind + cols - 1] &= ~(1 << 7);
        }
    }

    if (left(neighborVal))
    {
        acc += GetContr(ind, ind - 1, newPos, newVel, l0, stretch);
        if (stretch > tearThresh)
        {
            neighbors[ind] &= ~(1 << 4);
            neighbors[ind - 1] &= ~(1);
        }
    }

    if (up_left(neighborVal))
    {
        acc += GetContr(ind, ind - cols - 1, newPos, newVel, l0 * SQRT2, stretch);
        if (stretch > tearThresh)
        {
            neighbors[ind] &= ~(1 << 5);
            neighbors[ind - cols - 1] &= ~(1 << 1);
        }
    }

    if (up(neighborVal))
    {
        acc += GetContr(ind, ind - cols, newPos, newVel, l0, stretch);
        if (stretch > tearThresh)
        {
            neighbors[ind] &= ~(1 << 6);
            neighbors[ind - cols] &= ~(1 << 2);
        }
    }

    if (up_right(neighborVal))
    {
        acc += GetContr(ind, ind - cols + 1, newPos, newVel, l0 * SQRT2, stretch);
        if (stretch > tearThresh)
        {
            neighbors[ind] &= ~(1 << 7);
            neighbors[ind - cols + 1] &= ~(1 << 3);
        }
    }

    return acc;
}

float3 GetWindAcc(int ind, float3 newPos, float3 newVel)
{
    float3 acc = float3(0.f, 0.f, 0.f);
    float3 vel;
    float3 area;
    int neighborVal = neighbors[ind];
    int fac = 4 - right(neighborVal) + up(neighborVal) + left(neighborVal) + down(neighborVal);
    fac = pow(2, fac);

    //upper right
    if (right(neighborVal) && up(neighborVal))
    {
        vel = newVel + oldVel[ind + 1] + oldVel[ind - cols];
        vel /= 3.f;
        vel -= wind;
        area = cross(oldPos[ind + 1] - newPos, oldPos[ind - cols] - newPos);
        acc -= k_adrag * length(vel) * dot(vel, area) * normalize(area);
    }

    //lower right
    if (right(neighborVal) && down(neighborVal))
    {
        vel = newVel + oldVel[ind + 1] + oldVel[ind + cols];
        vel /= 3.f;
        vel -= wind;
        area = cross(oldPos[ind + cols] - newPos, oldPos[ind + 1] - newPos);
        acc -= k_adrag * length(vel) * dot(vel, area) * normalize(area);
    }

    //lower left
    if (down(neighborVal) && left(neighborVal))
    {
        vel = newVel + oldVel[ind - 1] + oldVel[ind + cols];
        vel /= 3.f;
        vel -= wind;
        area = cross(oldPos[ind - 1] - newPos, oldPos[ind + cols] - newPos);
        acc -= k_adrag * length(vel) * dot(vel, area) * normalize(area);
    }

    //upper left
    if (left(neighborVal) && up(neighborVal))
    {
        vel = newVel + oldVel[ind - 1] + oldVel[ind - cols];
        vel /= 3.f;
        vel -= wind;
        area = cross(oldPos[ind - cols] - newPos, oldPos[ind - 1] - newPos);
        acc -= k_adrag * length(vel) * dot(vel, area) * normalize(area);
    }

    return acc * fac;
}

float3 GetAcc(int ind, float3 newPos, float3 newVel)
{
    float3 acc = float3(0.0f, 0.0f, 0.0f);

    acc += GetSpringAcc(ind, newPos, newVel);
    acc += GetWindAcc(ind, newPos, newVel);
    acc += float3(0.f, -grav, 0.0f);

    return acc;
}

void RK4(int ind)
{
    float3 newVel;
    float3 k1 = GetAcc(ind, pos[ind], vel[ind]);
    newVel = vel[ind] + k1 * dt / 2.0f;
    float3 k2 = GetAcc(ind, pos[ind] + newVel * dt / 2.0f, newVel);
    newVel = vel[ind] + k2 * dt / 2.0f;
    float3 k3 = GetAcc(ind, pos[ind] + newVel * dt / 2.0f, newVel);
    newVel = vel[ind] + k3 * dt;
    float3 k4 = GetAcc(ind, pos[ind] + newVel * dt, newVel);
    vel[ind] += dt / 6.0f * (k1 + 2.0f * k2 + 2.0f * k3 + k4);
    pos[ind] += dt * vel[ind];
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int ind = id.x * cols + id.y;
    if (anchored(neighbors[ind]))
    {
        return;
    }

    oldPos[ind] = pos[ind];
    oldVel[ind] = vel[ind];

    RK4(ind);

    float3 dir = pos[ind] - obstPos;
    float r = obstRadius + nodeRadius;
    if (length(dir) < r)
    {
        pos[ind] = obstPos + normalize(dir) * r * 1.01f;
        vel[ind] = vel[ind] - (1.f + absorbtion) * normalize(dir) * dot(normalize(dir), vel[ind]);
        if (length(obstVel) > 0.01f)
        {
            vel[ind] = vel[ind] + normalize(dir) * dot(normalize(dir), obstVel);
        }
    }
}
