// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Ray Tracer based loosely on http://blog.three-eyed-games.com/2018/05/03/gpu-ray-tracing-in-unity-part-1/
// HDRI texture fom https://polyhaven.com/a/spiaggia_di_mondello

RWTexture2D<float4> Result;
Texture2D<float4> skybox;
SamplerState sampler_skybox;
float4x4 CamToWorld;
float4x4 CamInvProj;
float4 directionalLight;
static const float PI = 3.14159265f;
static const float INF = 1. / 0.;


float detail;
float water_iof; //ind of refraction
float4 water_color;
StructuredBuffer<float3> spheres;
float sphere_radius;
float3 minBounds;
float3 maxBounds;
float3 boundsCenter;
float k_smooth;


struct Ray
{
    float3 pos;
    float3 dir;
    float3 energy;
    bool inWater;
    int bounces;
};

Ray CreateRay(float3 start, float3 dir)
{
    Ray newRay;
    newRay.pos = start;
    newRay.dir = dir;
    newRay.energy = 1.0f;
    newRay.inWater = false;
    newRay.bounces = 0;
    return newRay;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 pos = mul(CamToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 dir = mul(CamInvProj, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    dir = mul(CamToWorld, float4(dir, 0.0f)).xyz;
    dir = normalize(dir);

    return CreateRay(pos, dir);
}

struct RayHit
{
    float3 pos;
    float dist;
    float3 normal;
    bool water;
    float3 color;
    float3 specular;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.pos = float3(0.f, 0.f, 0.f);
    hit.dist = INF;
    hit.normal = float3(0.f, 0.f, 0.f);
    hit.water = false;
    hit.color = float3(0.0f, 0.0f, 0.0f);

    return hit;
}

float2 distToSpheres(float3 pos)
{
    float fac = 5.0f;
    uint numSpheres, stride;
    spheres.GetDimensions(numSpheres, stride);
    float min = INF;
    float min2 = INF;
    float temp;
    float3 disp;
    float3 modPos;

    for (uint i = 0; i < numSpheres; i++)
    {
        modPos = float3(fmod(pos.x, fac) + spheres[i].x - 0.5f*fac, pos.y, fmod(pos.z, fac) + spheres[i].z - 0.5f*fac);
        disp = spheres[i] - modPos;
        temp = length(disp) - sphere_radius;
        if (temp < min)
        {
            min2 = min;
            min = temp;
        }
        else if (temp < min2)
        {
            min2 = temp;
        }
    }

    return float2(min, min2);
}

bool inBounds(float3 pos)
{
    pos = pos - boundsCenter;
    bool inX = pos.x > minBounds.x && pos.x < maxBounds.x;
    bool inY = pos.y > minBounds.y && pos.y < maxBounds.y;
    bool inZ = pos.z > minBounds.z && pos.z < maxBounds.z;
    return inX && inY && inZ;
}

//cubic smoothing technique from https://www.iquilezles.org/www/articles/smin/smin.htm
float smoothDist(float a, float b)
{
    float h = max(k_smooth - abs(a - b), 0.f) / k_smooth;
    return min(a, b) - h * h * h * k_smooth / 6.0f;
}

float smoothSpheresDist(float3 pos)
{
    float2 min = distToSpheres(pos);
    if (min.x == INF)
    {
        return INF;
    }
    if (min.y == INF)
    {
        return min.x;
    }
    return smoothDist(min.x, min.y);
}

//find normal by taking gradient of the distance function
//outlined here: https://computergraphics.stackexchange.com/questions/8093/how-to-compute-normal-of-surface-from-implicit-equation-for-ray-marching
float3 GetNormal(float3 pos)
{
    float eps = 0.0001f;
    float dx = smoothSpheresDist(pos + float3(eps, 0.f, 0.f)) - smoothSpheresDist(pos - float3(eps, 0.f, 0.f));
    float dy = smoothSpheresDist(pos + float3(0.f, eps, 0.f)) - smoothSpheresDist(pos - float3(0.f, eps, 0.f));
    float dz = smoothSpheresDist(pos + float3(0.f, 0.f, eps)) - smoothSpheresDist(pos - float3(0.f, 0.f, eps));
    float3 norm = (float3(dx, dy, dz)) / (2.f * eps);
    return normalize(norm);
}

void MarchRay(Ray ray, inout RayHit hit)
{
    float dist = 0.f;
    float step = smoothSpheresDist(ray.pos);

    while (step > detail)
    {
        dist += step;
        ray.pos += ray.dir * step;
        if (dist > 999.0f)
        {
            return;
        }
        step = smoothSpheresDist(ray.pos);
    }

    if (dist > hit.dist)
    {
        return;
    }

    hit.dist = dist;
    hit.pos = ray.pos;
    hit.normal = GetNormal(hit.pos);
    hit.color = water_color.xyz;
    hit.specular = float3(0.1f, 0.1f, 0.1f);
    hit.water = true;
}


void MarchRayWater(Ray ray, inout RayHit hit)
{
    //move ray far out and go back to water
    float3 startPos = ray.pos;
    ray.pos += ray.dir * 999.f;
    ray.dir *= -1;
    RayHit waterHit = CreateRayHit();
    MarchRay(ray, waterHit);

    if (waterHit.dist < INF)
    {
        return;
    }
    
    float dist = length(startPos - hit.pos);
    if (dist > hit.dist)
    {
        return;
    }

    hit.dist = dist;
    hit.pos = waterHit.pos;
    hit.normal = waterHit.normal;
    hit.color = water_color.xyz;
    hit.specular = waterHit.specular;
    hit.water = true;
}

void IntersectGroundPlane(Ray ray, inout RayHit hit)
{
    float dist = -ray.pos.y / ray.dir.y;
    if (dist < 0.f || dist > hit.dist)
    {
        return;
    }

    hit.dist = dist;
    hit.pos = ray.pos + dist * ray.dir;
    hit.normal = float3(0.0f, (float)sign(ray.pos.y), 0.0f);
    hit.color = float3(0.75f, 0.75f, 0.75f);
    hit.water = false;
    hit.specular = float3(0.01f, 0.01f, 0.01f);
}

RayHit Trace(inout Ray ray)
{
    RayHit bestHit = CreateRayHit();

    if (ray.inWater)
    {
        MarchRayWater(ray, bestHit);
    }
    else
    {
        MarchRay(ray, bestHit);
    }
    IntersectGroundPlane(ray, bestHit);

    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.dist < INF)
    {
        ray.pos = hit.pos + hit.normal * 0.001f;
        ray.energy *= hit.specular;

        return saturate(dot(hit.normal, directionalLight.xyz) * -1) * directionalLight.w * hit.color;
    }
    else
    {
        ray.energy = 0.0f;

        //Sample the skybox and write it
        float theta = acos(ray.dir.y) / -PI;
        float phi = atan2(ray.dir.x, -ray.dir.z) / -PI * 0.5f;
        return skybox.SampleLevel(sampler_skybox, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    RayHit hit;
    int bounces = 2;

    float3 result = float3(0.0f, 0.0f, 0.0f);
    for (int i = 0; i < bounces; i++)
    {
        hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        
        if (!any(ray.energy))
        {
            break;
        }

        ray.dir = reflect(ray.dir, hit.normal);
        ray.pos += hit.normal * 0.01f;
    }


    /*
    int rayCount = 0;
    Ray toTrace[7];
    int numRays = 1;

    toTrace[0] = ray;
    Ray curr;
    Ray newRay;
    while (numRays > 0 && rayCount < 7)
    {
        rayCount++;
        numRays -= 1;
        curr = toTrace[numRays];

        if (!any(curr.energy) || curr.bounces >= bounces)
        {
            continue;
        }

        hit = Trace(curr);
        result += curr.energy * Shade(curr, hit);

        if (hit.water)
        {
            newRay = curr;
            if (curr.inWater)
            {
                newRay.dir = refract(curr.dir, hit.normal, 1.0f / water_iof);
            }
            else
            {
                newRay.dir = refract(curr.dir, hit.normal, water_iof);
            }
            newRay.inWater = !newRay.inWater;
            newRay.bounces += 1;
            toTrace[numRays] = newRay;
            numRays += 1;

            curr.energy *= 0.1f;
        }

        curr.dir = reflect(curr.dir, hit.normal);
        curr.pos = curr.pos + hit.normal * 0.001f;
        curr.bounces += 1;
        toTrace[numRays] = curr;
        numRays += 1;
    }*/

    Result[id.xy] = float4(result, 1);
}
